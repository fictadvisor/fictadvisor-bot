[tool.poetry]
name = "app"
version = "0.1.0"
description = ""
authors = []
license = "MIT"
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.9"
aiogram = "^3.0.0"
jinja2 = "^3.1.2"
cachetools = "^5.3.0"
fastapi = "^0.103.0"
pydantic = "^2.3.0"
pydantic-settings = "^2.0.3"
uvicorn = "^0.23.2"
ngrok = "^0.12.1"
apscheduler = "^3.10.4"
uvloop = {version = "^0.17.0", platform = "linux"}


[tool.poetry.group.dev.dependencies]
ruff = "^0.0.286"
mypy = "^1.5.1"
types-cachetools = "^5.3.0.6"
pre-commit = "^3.4.0"
types-pytz = "^2023.3.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Header"]

[tool.mypy]
plugins = [
  "pydantic.mypy"
]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
